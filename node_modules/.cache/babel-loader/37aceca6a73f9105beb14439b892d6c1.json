{"ast":null,"code":"import axios from 'axios'; // REST API Endpoint URL\n\nconst STUDENTS_REST_API_URL = 'http://localhost:8080/api/students'; // Run validation for create or update student\n\nconst runValidation = student => {\n  return !student.id || isNaN(Number.parseInt(student.id)) || !student.name || !student.surname || !student.phoneNumber || !student.city || !student.district || !student.description;\n}; // Create Post or Put Student Obj\n\n\nexport const createStudentObj = student => {\n  let formData = new FormData();\n  formData.append('id', student.id);\n  formData.append('name', student.name);\n  formData.append('surname', student.surname);\n  formData.append('city', student.city);\n  formData.append('phoneNumber', student.phoneNumber);\n  formData.append('district', student.district);\n  formData.append('description', student.description);\n  formData.append(\"file\", student.file);\n  return formData;\n}; // Creates new student and checks for validations\n\nexport const createStudent = student => {\n  if (runValidation(student)) return new Promise((resolve, reject) => reject());\n  return axios({\n    method: 'post',\n    url: STUDENTS_REST_API_URL,\n    data: createStudentObj(student),\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n}; // Updates existing student and checks for validations\n\nexport const updateStudent = student => {\n  if (runValidation(student)) return new Promise((resolve, reject) => reject());\n  return axios.put(STUDENTS_REST_API_URL, createStudentObj(student));\n}; // Reading all students from the backend\n\nexport const readStudents = () => {\n  return axios.get(STUDENTS_REST_API_URL);\n}; // Reading student by id from the backend\n\nexport const readStudentById = studentId => {\n  return studentId ? axios.get(STUDENTS_REST_API_URL + \"/\" + studentId) : new Promise((resolve, reject) => reject());\n}; // Deleting student by id from the backend\n\nexport const deleteStudent = studentId => {\n  return studentId ? axios.delete(STUDENTS_REST_API_URL + \"/\" + studentId) : new Promise((resolve, reject) => reject());\n};","map":{"version":3,"sources":["C:/Users/evrim/Desktop/frontend/src/services/StudentService.js"],"names":["axios","STUDENTS_REST_API_URL","runValidation","student","id","isNaN","Number","parseInt","name","surname","phoneNumber","city","district","description","createStudentObj","formData","FormData","append","file","createStudent","Promise","resolve","reject","method","url","data","headers","updateStudent","put","readStudents","get","readStudentById","studentId","deleteStudent","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,MAAMC,qBAAqB,GAAG,oCAA9B,C,CAEA;;AACA,MAAMC,aAAa,GAAIC,OAAD,IAAa;AAC/B,SAAQ,CAACA,OAAO,CAACC,EAAT,IAAeC,KAAK,CAACC,MAAM,CAACC,QAAP,CAAgBJ,OAAO,CAACC,EAAxB,CAAD,CAApB,IAAqD,CAACD,OAAO,CAACK,IAA9D,IACR,CAACL,OAAO,CAACM,OADD,IACW,CAACN,OAAO,CAACO,WADpB,IACmC,CAACP,OAAO,CAACQ,IAD5C,IACoD,CAACR,OAAO,CAACS,QAD7D,IACyE,CAACT,OAAO,CAACU,WAD1F;AAEH,CAHD,C,CAKA;;;AACA,OAAO,MAAMC,gBAAgB,GAAIX,OAAD,IAAa;AACzC,MAAIY,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,EAAAA,QAAQ,CAACE,MAAT,CAAgB,IAAhB,EAAsBd,OAAO,CAACC,EAA9B;AACAW,EAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBd,OAAO,CAACK,IAAhC;AACAO,EAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2Bd,OAAO,CAACM,OAAnC;AACAM,EAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBd,OAAO,CAACQ,IAAhC;AACAI,EAAAA,QAAQ,CAACE,MAAT,CAAgB,aAAhB,EAA+Bd,OAAO,CAACO,WAAvC;AACAK,EAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4Bd,OAAO,CAACS,QAApC;AACAG,EAAAA,QAAQ,CAACE,MAAT,CAAgB,aAAhB,EAA+Bd,OAAO,CAACU,WAAvC;AACAE,EAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBd,OAAO,CAACe,IAAhC;AACA,SAAOH,QAAP;AACH,CAXM,C,CAaP;;AACA,OAAO,MAAMI,aAAa,GAAIhB,OAAD,IAAa;AACtC,MAAGD,aAAa,CAACC,OAAD,CAAhB,EACI,OAAO,IAAIiB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqBA,MAAM,EAAvC,CAAP;AAEJ,SAAOtB,KAAK,CAAC;AACTuB,IAAAA,MAAM,EAAE,MADC;AAETC,IAAAA,GAAG,EAAEvB,qBAFI;AAGTwB,IAAAA,IAAI,EAAEX,gBAAgB,CAACX,OAAD,CAHb;AAITuB,IAAAA,OAAO,EAAE;AAAE,sBAAiB;AAAnB;AAJA,GAAD,CAAZ;AAMH,CAVM,C,CAYP;;AACA,OAAO,MAAMC,aAAa,GAAIxB,OAAD,IAAa;AACtC,MAAGD,aAAa,CAACC,OAAD,CAAhB,EACI,OAAO,IAAIiB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqBA,MAAM,EAAvC,CAAP;AAEJ,SAAOtB,KAAK,CAAC4B,GAAN,CAAU3B,qBAAV,EAAiCa,gBAAgB,CAACX,OAAD,CAAjD,CAAP;AACH,CALM,C,CAOP;;AACA,OAAO,MAAM0B,YAAY,GAAG,MAAM;AAC9B,SAAO7B,KAAK,CAAC8B,GAAN,CAAU7B,qBAAV,CAAP;AACH,CAFM,C,CAIP;;AACA,OAAO,MAAM8B,eAAe,GAAIC,SAAD,IAAe;AAC1C,SAAOA,SAAS,GAAGhC,KAAK,CAAC8B,GAAN,CAAU7B,qBAAqB,GAAG,GAAxB,GAA8B+B,SAAxC,CAAH,GAChB,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqBA,MAAM,EAAvC,CADA;AAEH,CAHM,C,CAKP;;AACA,OAAO,MAAMW,aAAa,GAAID,SAAD,IAAe;AACxC,SAAOA,SAAS,GAAGhC,KAAK,CAACkC,MAAN,CAAajC,qBAAqB,GAAG,GAAxB,GAA8B+B,SAA3C,CAAH,GAChB,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqBA,MAAM,EAAvC,CADA;AAEH,CAHM","sourcesContent":["import axios from 'axios';\r\n\r\n// REST API Endpoint URL\r\nconst STUDENTS_REST_API_URL = 'http://localhost:8080/api/students';\r\n\r\n// Run validation for create or update student\r\nconst runValidation = (student) => {\r\n    return (!student.id || isNaN(Number.parseInt(student.id)) ||Â !student.name ||\r\n    !student.surname ||!student.phoneNumber || !student.city || !student.district || !student.description);\r\n};\r\n\r\n// Create Post or Put Student Obj\r\nexport const createStudentObj = (student) => {\r\n    let formData = new FormData();\r\n    formData.append('id', student.id);\r\n    formData.append('name', student.name);\r\n    formData.append('surname', student.surname);\r\n    formData.append('city', student.city);\r\n    formData.append('phoneNumber', student.phoneNumber);\r\n    formData.append('district', student.district);\r\n    formData.append('description', student.description);\r\n    formData.append(\"file\", student.file);\r\n    return formData;\r\n};\r\n\r\n// Creates new student and checks for validations\r\nexport const createStudent = (student) => {\r\n    if(runValidation(student))\r\n        return new Promise((resolve, reject) => reject());\r\n    \r\n    return axios({ \r\n        method: 'post',\r\n        url: STUDENTS_REST_API_URL,\r\n        data: createStudentObj(student), \r\n        headers: { 'Content-Type' : 'multipart/form-data' }\r\n    });\r\n};\r\n\r\n// Updates existing student and checks for validations\r\nexport const updateStudent = (student) => {\r\n    if(runValidation(student))\r\n        return new Promise((resolve, reject) => reject());\r\n    \r\n    return axios.put(STUDENTS_REST_API_URL, createStudentObj(student));\r\n};\r\n\r\n// Reading all students from the backend\r\nexport const readStudents = () => {\r\n    return axios.get(STUDENTS_REST_API_URL);\r\n};\r\n\r\n// Reading student by id from the backend\r\nexport const readStudentById = (studentId) => {\r\n    return studentId ? axios.get(STUDENTS_REST_API_URL + \"/\" + studentId) :\r\n    new Promise((resolve, reject) => reject());\r\n};\r\n\r\n// Deleting student by id from the backend\r\nexport const deleteStudent = (studentId) => {\r\n    return studentId ? axios.delete(STUDENTS_REST_API_URL + \"/\" + studentId) :\r\n    new Promise((resolve, reject) => reject());\r\n};"]},"metadata":{},"sourceType":"module"}